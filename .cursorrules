# Cursor Rules for Loro Edit HTML Editor

## 프로젝트 개요
이 프로젝트는 플러그인 기반의 HTML 에디터입니다. React + TypeScript + Vite를 사용하며, 실시간 미리보기와 함께 HTML 콘텐츠를 편집할 수 있는 듀얼 패널 인터페이스를 제공합니다.

## 개발 규칙

### 코드 스타일
- TypeScript strict 모드 사용
- 함수형 컴포넌트와 React Hooks 사용
- Tailwind CSS를 사용한 스타일링
- ESLint 규칙을 준수하여 코드 품질 유지

### 파일 구조 규칙
- `src/components/` - React 컴포넌트
- `src/plugins/` - 플러그인 시스템 관련 파일
- `src/store/` - Zustand 상태 관리
- `src/hooks/` - 커스텀 훅
- `src/types/` - TypeScript 타입 정의
- `src/utils/` - 유틸리티 함수

### 플러그인 개발 규칙
플러그인을 새로 생성할 때는 다음 규칙을 따르세요:

1. **플러그인 인터페이스 구현**: `src/plugins/types.ts`의 `Plugin` 인터페이스를 구현
2. **매칭 로직**: `match()` 함수로 어떤 엘리먼트를 처리할지 정의
3. **파싱 로직**: `parse()` 함수로 DOM 엘리먼트를 ParsedElement로 변환
4. **렌더링 로직**: `render()` 함수로 React 컴포넌트 반환
5. **플러그인 등록**: `src/plugins/index.ts`에서 플러그인 등록

### 상태 관리 규칙
- Zustand 스토어(`src/store/editorStore.ts`) 사용
- 불변성을 유지하며 상태 업데이트
- Temporal 미들웨어를 통한 undo/redo 기능 활용
- 선택 상태는 block/text 모드로 구분하여 관리

### 컴포넌트 작성 규칙
1. **Props 타입 정의**: 모든 컴포넌트에 명확한 Props 인터페이스 정의
2. **React.FC 사용**: 함수형 컴포넌트에 React.FC 타입 명시
3. **Hook 순서**: 같은 타입의 훅들을 그룹화하여 배치
4. **이벤트 핸들러**: useCallback으로 최적화된 이벤트 핸들러 사용

### 선택 시스템 규칙
- **Block 모드**: 전체 엘리먼트 선택 및 구조적 조작
- **Text 모드**: 선택된 텍스트 엘리먼트 내에서 인라인 편집
- 선택 상태는 시각적 피드백과 함께 명확하게 표시

### 성능 최적화 규칙
1. **메모이제이션**: React.memo, useMemo, useCallback 적절히 활용
2. **불필요한 리렌더링 방지**: 상태 업데이트 시 참조 동일성 고려
3. **플러그인 로직 최적화**: 플러그인 매칭 로직에서 불필요한 연산 방지

### 빌드 및 테스트 규칙
- **개발**: `pnpm dev`로 개발 서버 실행
- **빌드**: `pnpm build`로 프로덕션 빌드 (TypeScript 컴파일 포함)
- **린팅**: `pnpm lint`로 코드 품질 검사
- **변경사항 테스트**: `pnpm build`로 TypeScript 오류 검증 필수

### HTML 파싱 규칙
- `src/utils/htmlParser.ts`를 통한 HTML 파싱
- DOM 엘리먼트 → 플러그인 파싱 → ParsedElement 객체 변환
- 파싱된 엘리먼트는 플러그인 시스템을 통해 React 컴포넌트로 렌더링

### 에러 처리 규칙
1. **플러그인 에러**: 플러그인 렌더링 실패 시 null 반환하여 앱 크래시 방지
2. **상태 업데이트 에러**: try-catch로 상태 업데이트 실패 처리
3. **API 호출 에러**: 데이터베이스 fetch 실패 시 콘솔 에러 로깅

### 접근성 규칙
- 키보드 네비게이션 지원 (`react-hotkeys-hook` 활용)
- 시맨틱 HTML 요소 사용
- ARIA 속성 적절히 활용

### 코드 리뷰 체크리스트
- [ ] TypeScript 타입 안전성 확인
- [ ] 플러그인 인터페이스 준수 확인
- [ ] 상태 업데이트 불변성 유지 확인
- [ ] 성능 최적화 적용 확인
- [ ] 에러 핸들링 구현 확인
- [ ] ESLint 규칙 준수 확인

### 커밋 메시지 규칙
- feat: 새로운 기능 추가
- fix: 버그 수정
- refactor: 코드 리팩토링
- style: 코드 스타일 변경
- plugin: 플러그인 관련 변경
- store: 상태 관리 관련 변경
- ui: UI 컴포넌트 관련 변경

## 금지사항
- 직접적인 DOM 조작 금지 (React 패턴 사용)
- 전역 상태 외부에서 상태 변경 금지
- 플러그인 시스템 우회하여 엘리먼트 렌더링 금지
- TypeScript any 타입 남용 금지
- 불필요한 useEffect 사용 금지