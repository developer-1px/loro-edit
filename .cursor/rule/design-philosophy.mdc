# Design Philosophy

## 🎨 핵심 디자인 원칙

### Builder.io 스타일 WYSIWYG 에디터
Loro Edit은 Builder.io의 디자인 철학을 따라 설계되었습니다.

#### 미니멀리즘 우선
- **복잡한 버튼 UI 지양**: 다이얼로그나 복합적인 인터페이스 최소화
- **컨텍스트 도구**: 필요한 때만 나타나는 도구들
- **시각적 깔끔함**: 불필요한 요소 제거

#### 선택 중심 워크플로우
```
1. 요소 선택 (amber 오버레이 표시)
2. 컨텍스트 도구 표시 (floating button)
3. 편집 인터페이스 제공 (popover)
4. 즉시 적용 또는 취소
```

## 🎯 사용자 경험 원칙

### 비침투적 인터페이스
- **투명한 배경**: 어두운 모달 오버레이 사용 금지
- **작업 지속성**: 편집 중에도 다른 요소들이 계속 보임
- **자연스러운 상호작용**: 클릭 외부 영역으로 팝업 닫기

### 접근성과 직관성
- **키보드 우선**: 모든 주요 기능의 키보드 단축키
- **시각적 피드백**: 명확한 선택 상태 표시
- **일관된 색상**: 요소 타입별 고유 색상 시스템

## 🎪 인터랙션 패턴

### Figma/FigJam 스타일 선택
- **계층적 선택**: 같은 요소 반복 클릭으로 상위 요소 선택
- **그룹 선택**: inline 요소들의 그룹 단위 선택
- **시각적 계층**: 중첩된 요소들의 명확한 표시

### 편집 모드 구분
1. **Block Mode**: 구조적 요소 선택 및 조작
2. **Text Mode**: 텍스트 인라인 편집

## 🎨 시각적 디자인 원칙

### 색상 시스템
```typescript
const ELEMENT_COLORS = {
  text: "#10b981",    // green - 텍스트
  image: "#f59e0b",   // amber - 이미지
  svg: "#f59e0b",     // amber - SVG (이미지와 동일)
  section: "#3b82f6", // blue - 섹션
  database: "#8b5cf6", // purple - 데이터베이스
  repeat: "#ef4444"   // red - 반복 컨테이너
}
```

### 크기와 간격
- **Compact Design**: 작은 팝오버와 도구들
- **적절한 여백**: 8px, 4px 단위의 일관된 간격
- **반응형 크기**: 컨텐츠에 따른 동적 크기 조정

## 🔧 기술적 철학

### 성능 우선
- **React.memo**: 불필요한 리렌더링 방지
- **이벤트 최적화**: document.elementsFromPoint 사용
- **메모이제이션**: 선택 트리 캐싱

### 확장성 고려
- **플러그인 아키텍처**: 새로운 요소 타입 쉽게 추가
- **타입 안전성**: TypeScript strict mode
- **일관된 인터페이스**: Plugin interface 준수

## 🚫 금지사항

### UI/UX 금지사항
- ❌ 복잡한 다이얼로그나 모달
- ❌ 어두운 배경 오버레이
- ❌ 과도한 애니메이션
- ❌ 불필요한 버튼이나 컨트롤

### 기술적 금지사항
- ❌ any 타입 사용
- ❌ 직접적인 DOM 조작
- ❌ 복잡한 상태 관리
- ❌ 성능을 해치는 패턴

## ✅ 권장사항

### UI/UX 권장사항
- ✅ Floating 버튼과 팝오버
- ✅ 즉시 피드백
- ✅ 키보드 단축키
- ✅ 시각적 선택 상태

### 기술적 권장사항
- ✅ Zustand를 통한 상태 관리
- ✅ 함수형 컴포넌트와 Hooks
- ✅ shadcn/ui 컴포넌트 활용
- ✅ 일관된 에러 처리

## 🎯 목표

### 단기 목표
- 모든 플러그인의 선택 기반 편집 구현
- 키보드 단축키 시스템 완성
- 접근성 표준 준수

### 장기 목표
- 실시간 협업 기능
- 고급 애니메이션 지원
- 모바일 최적화
- 플러그인 마켓플레이스