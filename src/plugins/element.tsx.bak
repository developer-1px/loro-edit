// src/plugins/element.tsx

import React from "react";
import type { Plugin } from "./types";
import type { ParsedElement, RegularElement } from "../types";
import { VOID_ELEMENTS } from "../utils/voidElements";
import { attributesToReactProps } from "../utils/attributesToReactProps";

export const elementPlugin: Plugin = {
  name: "element",
  version: "1.0.0",
  description:
    "Handles generic HTML elements that are not handled by other plugins",

  selectable: {
    enabled: false,
    name: "Element",
    color: "#6b7280",
    level: "element",
    elementType: "block",
    priority: 999
  },

  match: (element: Element) => {
    // Skip text content elements
    if (element.getAttribute("data-element-type") === "text") {
      return false;
    }

    // Handle all HTML elements as fallback
    return true;
  },

  parse: (element: Element): ParsedElement | null => {
    const attributes = Array.from(element.attributes).reduce((acc, attr) => {
      acc[attr.name] = attr.value;
      return acc;
    }, {} as Record<string, string>);
    // Parse generic HTML elements
    return {
      type: "element" as const,
      id: attributes.id || crypto.randomUUID(),
      attributes,
      tagName: element.tagName.toLowerCase(),
      children: [], // Will be filled by htmlParser
    };
  },

  render: ({ parsedElement, renderElement }) => {
    const regularElement = parsedElement as RegularElement;
    const Tag = regularElement.tagName as keyof React.JSX.IntrinsicElements;
    const isVoid = VOID_ELEMENTS.has(Tag);

    const originalAttributes = { ...regularElement.attributes };
    delete originalAttributes.id; // it's used for key, not a good idea to spread

    const props = {
      ...attributesToReactProps(originalAttributes),
      key: regularElement.id,
      "data-element-id": regularElement.id,
    };

    const children =
      !isVoid && regularElement.children
        ? regularElement.children.map(renderElement).filter(Boolean)
        : null;

    if (children && children.length > 0) {
      return React.createElement(Tag, props, ...children);
    }
    return React.createElement(Tag, props);
  },
};
